#include <Arduino.h>
#include <avr/io.h>
#include <FreeRTOS.h>
#include <task.h>

#define STACK_SIZE   200
#define LED_PIN6      6
#define LED_PIN7      7
#define LED_PIN8      8
#define LED_PIN9      9
#define TASK_WCET1	  1500
#define TASK_WCET2	  2500
#define TASK_WCET3	  1700
#define TASK_WCET4	  700


void myDelay(int ms) {
	for (int i = 0; i < ms; i++) {
		delayMicroseconds(1000);
	}
}


void task1()
{
	int count = 0;
	Serial.println("task1");
	while (count < TASK_WCET1) {
		digitalWrite(LED_PIN6, HIGH);
		myDelay(50);
		digitalWrite(LED_PIN6, LOW);
		myDelay(50);
		count +=100;
	}
}


void task2()
{
	int count = 0;
	Serial.println("task2");
	while (count < TASK_WCET2) {
		digitalWrite(LED_PIN7, HIGH);
		myDelay(50);
		digitalWrite(LED_PIN7, LOW);
		myDelay(50);
		count +=100;
	}
}

void task3()
{
	int count = 0;
	Serial.println("task3");
	while (count < TASK_WCET3) {
		digitalWrite(LED_PIN8, HIGH);
		myDelay(50);
		digitalWrite(LED_PIN8, LOW);
		myDelay(50);
		count +=100;
	}
}
void task4()
{
	int count = 0;
	Serial.println("task4");
	while (count < TASK_WCET4) {
		digitalWrite(LED_PIN9, HIGH);
		myDelay(50);
		digitalWrite(LED_PIN9, LOW);
		myDelay(50);
		count +=100;
	}
}

void task0(void *p){
	    Serial.println("task0");
		TickType_t xLastWakeTime;
		const TickType_t idle = 5;

		// Initialise the xLastWakeTime variable with the current time.
		xLastWakeTime = xTaskGetTickCount();
		Serial.println("task0");
		while(1){

			task1();
			task2();
			task4();
			vTaskDelayUntil( &xLastWakeTime, idle);

			task1();
			task3();
			vTaskDelayUntil( &xLastWakeTime, idle);

			task1();
			task2();
			vTaskDelayUntil( &xLastWakeTime, idle);

			task1();
			task3();
			vTaskDelayUntil( &xLastWakeTime, idle);
		}
}

void setup()
{
	pinMode(LED_PIN6, OUTPUT);
	digitalWrite(LED_PIN6, LOW);
	pinMode(LED_PIN7, OUTPUT);
	digitalWrite(LED_PIN7, LOW);
	pinMode(LED_PIN8, OUTPUT);
	digitalWrite(LED_PIN8, LOW);
	pinMode(LED_PIN9, OUTPUT);
	digitalWrite(LED_PIN9, LOW);
	Serial.begin(115200);
}

void loop() {
	Serial.println("megatest");
	xTaskCreate(task0,           // Pointer to the task entry function
				"Task0",         // Task name
				STACK_SIZE,      // Stack size
				NULL,            // Pointer that will be used as parameter
				10,               // Task priority
				NULL);           // Used to pass back a handle by which the created task can be referenced.

	vTaskStartScheduler();
}
