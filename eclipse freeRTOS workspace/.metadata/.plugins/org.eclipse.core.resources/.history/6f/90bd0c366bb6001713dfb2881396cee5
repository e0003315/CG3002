#include <Arduino.h>
#include <avr/io.h>
#include <FreeRTOS.h>
#include <task.h>

#define STACK_SIZE   200
#define LED_PIN6      6
#define LED_PIN7      7
#define LED_PIN8      8
#define LED_PIN9      9
#define TASK_WCET1	  1500
#define TASK_WCET2	  2500
#define TASK_WCET3	  1700
#define TASK_WCET4	  700


void myDelay(int ms) {
	for (int i = 0; i < ms; i++) {
		delayMicroseconds(1000);
	}
}


void task1()
{
	Serial.println("task1");
}


void task2()
{
	Serial.println("task2");
}

void task3()
{
	Serial.println("task3");
}
void task4()
{
	Serial.println("task4");
}

void task0(void *p){
	int count =0;
	    Serial.println("task0");
		TickType_t xLastWakeTime;
		const TickType_t idle = 10000;

		// Initialise the xLastWakeTime variable with the current time.
		xLastWakeTime = xTaskGetTickCount();
		Serial.println("task0");
		while(1){

			task4();
			Serial.println(count);
			Serial.println(configTICK_RATE_HZ);
			Serial.println(configCPU_CLOCK_HZ );
			count++;

			vTaskDelayUntil( &xLastWakeTime, idle);
			//vTaskDelay(200);

//			Serial.print("1");
//			vTaskDelay(2000);

		}
}

void setup()
{
	Serial.begin(115200);
}

void loop() {
	Serial.println("did i do it?");
	xTaskCreate(task0,           // Pointer to the task entry function
				"Task0",         // Task name
				STACK_SIZE,      // Stack size
				NULL,            // Pointer that will be used as parameter
				0,               // Task priority
				NULL);           // Used to pass back a handle by which the created task can be referenced.

	vTaskStartScheduler();
}
